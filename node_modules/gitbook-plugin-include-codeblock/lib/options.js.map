{"version":3,"sources":["../src/options.js"],"names":["path","require","cfg","gitbook","properties","defaultTemplateMap","Object","freeze","join","__dirname","full","ace","acefull","defaultBookOptionsMap","check","edit","lang","fixlang","template","theme","unindent","defaultKeyValueMap","id","marker","name","title","convertValue","valstr","valtype","JSON","parse","checkMapTypes","kvMap","funcLabel","keys","forEach","key","undefined","leftType","rightType","console","error","initOptions","options","dbom","kv","assign","kvmap"],"mappings":"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","sourcesContent":["// LICENSE : MIT\n// Notes:\n// 1) If you add new options type, you have to update type checks in parser.js\n// (see parseVariableFromMap).\n// 2) The default map (objects) are immutable (frozen). They are updated (new map\n// with different names) while parsing book.json options first, then eventually\n// overwriten by commands options.\n\"use strict\";\nconst path = require(\"path\");\nconst cfg = require(\"../package.json\").gitbook.properties;\n\nexport const defaultTemplateMap = Object.freeze({\n    default: path.join(__dirname, \"..\", \"templates\", \"default-template.hbs\"),\n    full: path.join(__dirname, \"..\", \"templates\", \"full-template.hbs\"),\n    ace: path.join(__dirname, \"..\", \"templates\", \"ace-template.hbs\"),\n    acefull: path.join(__dirname, \"..\", \"templates\", \"acefull-template.hbs\")\n});\n\n// Map for Book.json options. (avoid `undefined` for ace options),\n// NB: Default book option, type, desc are set in the package.json file.\nexport const defaultBookOptionsMap = Object.freeze({\n    check: cfg.check.default,\n    edit: cfg.edit.default,\n    lang: cfg.lang.default,\n    fixlang: cfg.fixlang.default,\n    template: cfg.template.default,\n    theme: cfg.theme.default,\n    unindent: cfg.unindent.default\n});\n\n// Possible command key-values (kv).\n// (avoid undefined default value because we check value types).\nexport const defaultKeyValueMap = Object.freeze({\n    // Local\n    class: \"\",\n    id: \"\",\n    marker: \"\",\n    name: \"\",\n    title: \"\",\n    // Global/Local\n    check: defaultBookOptionsMap.check,\n    edit: defaultBookOptionsMap.edit,\n    lang: defaultBookOptionsMap.lang,\n    fixlang: defaultBookOptionsMap.fixlang,\n    template: defaultBookOptionsMap.template,\n    theme: defaultBookOptionsMap.theme,\n    unindent: defaultBookOptionsMap.unindent\n});\n\n/**\n * Convert string value to value type.\n * @param {string} valtype\n */\nexport function convertValue(valstr, valtype) {\n    // remove quotes\n    if (valtype === \"boolean\" || valtype === \"number\") {\n        return JSON.parse(valstr);\n    }\n    return valstr;\n}\n\n/**\n * Check that maps types equal to default key value map.\n * @param {object} kvMap\n * @param {string} funcLabel\n */\nexport function checkMapTypes(kvMap, funcLabel) {\n    Object.keys(kvMap).forEach((key) => {\n        if (defaultKeyValueMap[key] !== undefined) {\n            const leftType = typeof kvMap[key];\n            const rightType = typeof defaultKeyValueMap[key];\n            if (!(leftType === rightType)) {\n                console.error(\n                    `include-codeblock: checkMapTypes (${funcLabel}) : wrong value type for key \\`${key}\\`: key type: \\`${leftType}\\` (!= \\`${rightType}\\`)`\n                );\n            }\n        }\n    });\n}\n\n/**\n * Check that maps types equal to default key value map.\n * @param {{template?: string}} options\n * @return {object} kvMap\n */\nexport function initOptions(options) {\n    const dbom = defaultBookOptionsMap;\n    const kv = Object.assign({}, defaultKeyValueMap);\n    // Overwrite default value with user book options.\n    Object.keys(dbom).forEach((key) => {\n        if (options[key] != undefined) {\n            kv[key] = convertValue(options[key], typeof dbom[key]);\n        }\n    });\n    const kvmap = Object.freeze(kv);\n    checkMapTypes(kvmap, \"initOptions\");\n    return kvmap;\n}\n"],"file":"options.js"}