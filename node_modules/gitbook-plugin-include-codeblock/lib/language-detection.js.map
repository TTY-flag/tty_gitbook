{"version":3,"sources":["../src/language-detection.js"],"names":["path","require","languageMap","languageAceModeFix","resultAceMode","lookupLanguageByAceMode","kvMap","matchLang","lang","Object","keys","some","langKey","aceMode","undefined","lookupLanguageByExtension","filePath","ext","matchext","exec","extname","extensions","extension","getLang","defaultKeyValueMap","console","warn","fixlang","kvm","assign","freeze"],"mappings":"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","sourcesContent":["// LICENSE : MIT\n\"use strict\";\nconst path = require(\"path\");\nconst languageMap = require(\"language-map\");\nimport { defaultKeyValueMap } from \"./options.js\";\n\n// Workaround for not working languages.\n// Redefine aceMode locally.\n// @param {string}\n// @return {string}\nexport function languageAceModeFix(resultAceMode) {\n    if (resultAceMode == \"c_cpp\") {\n        resultAceMode = \"cpp\";\n    }\n    return resultAceMode;\n}\n\n/**\n * Return aceMode from lang in kvMap.\n * @param {object} kvMap\n * @return {object}\n */\nexport function lookupLanguageByAceMode(kvMap) {\n    let resultAceMode;\n    const matchLang = kvMap.lang;\n    Object.keys(languageMap).some((langKey) => {\n        const aceMode = languageMap[langKey].aceMode;\n        if (matchLang === aceMode) {\n            resultAceMode = aceMode;\n            return resultAceMode;\n        }\n        return undefined;\n    });\n    return resultAceMode;\n}\n\n/**\n * Return aceMode from file extension or lang in kvMap, if is\n * an extension.\n * @param {object} kvMap\n * @param {string} filePath\n * @return {object}\n */\nexport function lookupLanguageByExtension(kvMap, filePath) {\n    const lang = kvMap.lang;\n    let ext;\n    // Check first if map `lang` is an extension string.\n    const matchext = /(.+)/g.exec(lang);\n    if (matchext != null) {\n        ext = matchext[1];\n    } else {\n        // Load from file extension.\n        ext = path.extname(filePath);\n    }\n    let aceMode;\n    Object.keys(languageMap).some((langKey) => {\n        const extensions = languageMap[langKey].extensions;\n        if (!extensions) {\n            return false;\n        }\n        return extensions.some((extension) => {\n            if (ext === extension) {\n                aceMode = languageMap[langKey].aceMode;\n            }\n            return false;\n        });\n    });\n    return aceMode;\n}\n\n/**\n * Update key-value map lang with aceMode lang.\n * @param {object} kvMap\n * @param {string} filePath\n * @return {object}\n */\nexport function getLang(kvMap, filePath) {\n    let aceMode;\n    // Retrieve ace mode from lang.\n    if (kvMap.lang !== defaultKeyValueMap.lang) {\n        aceMode = lookupLanguageByAceMode(kvMap);\n    }\n    // Retrieve ace mode from file ext or lang ext.\n    if (aceMode === undefined) {\n        aceMode = lookupLanguageByExtension(kvMap, filePath);\n    }\n    // Ace mode not found, keep default.\n    if (aceMode === undefined) {\n        console.warn(\"include-codeblock: unknown language `\" + kvMap.lang + \"`, use default\");\n        return kvMap;\n    }\n    if (kvMap.fixlang) {\n        aceMode = languageAceModeFix(aceMode);\n    }\n    const kvm = Object.assign({}, kvMap);\n    kvm.lang = aceMode;\n    return Object.freeze(kvm);\n}\n"],"file":"language-detection.js"}