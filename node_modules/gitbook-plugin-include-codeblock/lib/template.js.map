{"version":3,"sources":["../src/template.js"],"names":["fs","require","readFileFromPath","path","content","readFileSync","err","code","console","warn","getTemplateContent","kvMap","t","template","dt","defaultBookOptionsMap","tPath","defaultTemplateMap","dtPath","isTemplateDefault","isTemplatePath","undefined","p"],"mappings":"AAAA;AACA;;;;;;;;AAEA;;AADA,IAAMA,EAAE,GAAGC,OAAO,CAAC,IAAD,CAAlB;;AAGA;AACA;AACA;AACA;AACA;AACO,SAASC,gBAAT,CAA0BC,IAA1B,EAAgC;AACnC,MAAIC,OAAJ;;AACA,MAAI;AACAA,IAAAA,OAAO,GAAGJ,EAAE,CAACK,YAAH,CAAgBF,IAAhB,EAAsB,MAAtB,CAAV;AACH,GAFD,CAEE,OAAOG,GAAP,EAAY;AACV,QAAIA,GAAG,CAACC,IAAJ,KAAa,QAAjB,EAA2B;AACvBC,MAAAA,OAAO,CAACC,IAAR,CAAa,4BAA4BN,IAAzC;AACA,aAAO,4BAA4BA,IAAnC;AACH,KAHD,MAGO;AACH,YAAMG,GAAN;AACH;AACJ;;AACD,SAAOF,OAAP;AACH;AAED;AACA;AACA;AACA;AACA;;;AACO,SAASM,kBAAT,CAA4BC,KAA5B,EAAmC;AACtC,MAAMC,CAAC,GAAGD,KAAK,CAACE,QAAhB;AACA,MAAMC,EAAE,GAAGC,+BAAsBF,QAAjC;AACA,MAAMG,KAAK,GAAGC,4BAAmBL,CAAnB,CAAd;AACA,MAAMM,MAAM,GAAGD,4BAAmBH,EAAnB,CAAf;AAEA,MAAMK,iBAAiB,GAAGP,CAAC,KAAKE,EAAhC;AACA,MAAMM,cAAc,GAAGJ,KAAK,KAAKK,SAAjC;AAEA,MAAIC,CAAJ,CATsC,CAUtC;;AACA,MAAIH,iBAAJ,EAAuB;AACnBG,IAAAA,CAAC,GAAGJ,MAAJ;AACH,GAFD,MAEO,IAAIE,cAAJ,EAAoB;AACvB;AACAE,IAAAA,CAAC,GAAGV,CAAJ;AACH,GAHM,MAGA;AACH;AACAU,IAAAA,CAAC,GAAGN,KAAK,IAAIE,MAAb;AACH;;AACD,SAAOhB,gBAAgB,CAACoB,CAAD,CAAvB;AACH","sourcesContent":["// LICENSE : MIT\n\"use strict\";\nconst fs = require(\"fs\");\nimport { defaultBookOptionsMap, defaultTemplateMap } from \"./options.js\";\n\n/**\n * Sunc file read with path check\n * @param {string} path\n * @return {string}\n */\nexport function readFileFromPath(path) {\n    let content;\n    try {\n        content = fs.readFileSync(path, \"utf8\");\n    } catch (err) {\n        if (err.code === \"ENOENT\") {\n            console.warn(\"Error: file not found: \" + path);\n            return \"Error: file not found: \" + path;\n        } else {\n            throw err;\n        }\n    }\n    return content;\n}\n\n/**\n * Load template from template label\n * @param {object} kvMap\n * @return {string}\n */\nexport function getTemplateContent(kvMap) {\n    const t = kvMap.template;\n    const dt = defaultBookOptionsMap.template;\n    const tPath = defaultTemplateMap[t];\n    const dtPath = defaultTemplateMap[dt];\n\n    const isTemplateDefault = t === dt;\n    const isTemplatePath = tPath === undefined;\n\n    let p;\n    // No template option.\n    if (isTemplateDefault) {\n        p = dtPath;\n    } else if (isTemplatePath) {\n        // Template option is a path.\n        p = t;\n    } else {\n        // Template option one of template/ directory.\n        p = tPath || dtPath;\n    }\n    return readFileFromPath(p);\n}\n"],"file":"template.js"}