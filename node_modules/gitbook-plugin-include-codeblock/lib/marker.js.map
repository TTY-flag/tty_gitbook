{"version":3,"sources":["../src/marker.js"],"names":["commentOpen","commentClose","doxChar","spaces","spacesAny","markerNameFormat","getMarker","keyValObject","marker","hasMarker","undefined","markerSliceCode","code","markers","parsedcode","markerlist","split","i","forEach","balise","pattern","regstr","reg","RegExp","res","match","console","warn","length","replaceAll","str","sub","replace","removeMarkers","tag"],"mappings":"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","sourcesContent":["// LICENSE : MIT\n/*\n * Feature: doxygen like snippet code.\n * For code source documenting, see\n * https://www.stack.nl/~dimitri/doxygen/manual/commands.html#cmdsnippet\n *\n * Gibook usage:\n *\n *      [import:<markername>](path/to/file)\n *\n * NB: markername must begin with a letter to avoid conflict with slice\n *     line range.\n */\n\"use strict\";\nconst commentOpen = \"(/+/+|#|%|/\\\\*|<!--)\";\nconst commentClose = \"(\\\\*/|-->)?\";\nconst doxChar = \"[*!/#]\"; // doxygen documentation character\nconst spaces = \"[ \\t]*\"; // h spaces\nconst spacesAny = \"\\\\s*\"; // h+v spaces\nconst markerNameFormat = \"(\\\\s*[a-zA-Z][\\\\w\\\\s]*)\"; // Must contain a char.\n\n/*\n * format: [import:<markername>](path/to/file)\n * @param {Object} keyValObject\n * @return {string}\n */\nexport function getMarker(keyValObject) {\n    return keyValObject.marker;\n}\n\n/**\n * format: [import:<markername>](path/to/file)\n * check if the import filled has a markername.\n * @example:\n *      hasMarker(label)\n * @param {Object} keyValObject\n * @returns {boolean}\n */\nexport function hasMarker(keyValObject) {\n    const marker = getMarker(keyValObject);\n    return marker !== undefined && marker !== \"\";\n}\n\n/* Parse the code from given markers\n *\n * see test/marker-test.js\n */\n/**\n * get sliced code by {@link markername}\n * @param {string} code\n * @param {string} markers\n * @returns {string}\n */\nexport function markerSliceCode(code, markers) {\n    if (markers === undefined || markers === \"\") {\n        return code;\n    }\n    var parsedcode = \"\";\n    const markerlist = markers.split(\",\");\n\n    let i = 0;\n    // regex\n    markerlist.forEach((marker) => {\n        const balise = \"\\\\[\" + marker + \"\\\\]\";\n        const pattern = \"\\\\n\" + spacesAny + commentOpen + doxChar + spaces + balise + spaces + commentClose + spaces;\n\n        const regstr = pattern + \"\\\\n*([\\\\s\\\\S]*)\" + pattern;\n        const reg = new RegExp(regstr);\n        const res = code.match(reg);\n\n        if (res) {\n            parsedcode += res[3]; // count parenthesis in pattern.\n        } else {\n            console.warn(\"markersSliceCode(): marker `\" + marker + \"` not found\");\n            parsedcode += \"Error: marker `\" + marker + \"` not found\";\n        }\n        if (markerlist.length > 0 && i < markerlist.length - 1) {\n            parsedcode += \"\\n\";\n        }\n        i++;\n    });\n    return parsedcode;\n}\n\n/** Replace all regex occurence by sub in the string str,\n * @param {string} str\n * @param {string} reg\n * @param {string} sub\n * @return {string}\n */\nexport function replaceAll(str, reg, sub) {\n    return str.replace(new RegExp(reg, \"g\"), sub);\n}\n\n/** Function that remove all markers in the given code\n * @param {string} code\n * @return {string}\n */\nexport function removeMarkers(code) {\n    // various language comment\n    const tag = \"\\\\[\" + markerNameFormat + \"\\\\]\";\n    const pattern = spacesAny + commentOpen + doxChar + spaces + tag + spaces + commentClose + spaces;\n\n    return replaceAll(code, pattern, \"\");\n}\n"],"file":"marker.js"}