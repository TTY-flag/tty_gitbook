// LICENSE : MIT
"use strict";
/*
 format: [import:<start-lineNumber>-<end-lineNumber>](path/to/file)
 lineNumber start with 1.

 Patterns:

 All: [import, hello-world.js](../src/hello-world.js)
 1-2: [import:1-2, hello-world.js](../src/hello-world.js)
 2-3: [import:2-3, hello-world.js](../src/hello-world.js)
 2>=: [import:2-, hello-world.js](../src/hello-world.js)
 <=3: [import:-3, hello-world.js](../src/hello-world.js)
 */

/**
 * get range from label
 * @param {string} label
 * @returns {number[]}
 */

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getSliceRange = getSliceRange;
exports.hasSliceRange = hasSliceRange;
exports.sliceCode = sliceCode;

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function getSliceRange(label) {
  var regExp = /^(?:include|import):(\d*)-(\d*)[,\s]?.*$/;
  var matches = regExp.exec(label);

  if (matches === null) {
    return [];
  } // return [undefined, undefined] if not matched, else contains [all,start,end].


  var _matches$slice = matches.slice(1, 3),
      _matches$slice2 = _slicedToArray(_matches$slice, 2),
      start = _matches$slice2[0],
      end = _matches$slice2[1];

  var startOrUndefined = start !== "" ? parseInt(start, 10) : undefined;
  var endOrUndefined = end !== "" ? parseInt(end, 10) : undefined;
  return [startOrUndefined, endOrUndefined];
}
/**
 * has range command in the label
 * @param {string} label
 * @returns {boolean}
 */


function hasSliceRange(label) {
  var range = getSliceRange(label);

  var _range = _slicedToArray(range, 2),
      start = _range[0],
      end = _range[1];

  return start !== undefined || end !== undefined;
}
/**
 * slice {@link code} with {@link start} and {@link end}
 * @param {string} code
 * @param {number|undefined} [start]
 * @param {number|undefined} [end]
 * @param {boolean|undefined} [untrimmed]
 * @returns {string}
 */


function sliceCode(code, start, end, untrimmed) {
  if (start === undefined && end === undefined) {
    return code;
  }

  var slitted = code.split("\n");

  if (start === undefined) {
    start = 1;
  }

  if (end === undefined) {
    end = slitted.length;
  }

  var sliced = slitted.slice(start - 1, end).join("\n");
  return untrimmed ? sliced : sliced.trim();
}
//# sourceMappingURL=slicer.js.map